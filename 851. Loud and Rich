class Solution {
public:
    void dfs(vector<vector<int>>& adj, vector<bool>& vis, int v, int& res, vector<int>& quiet){
        if(vis[v])
        return;

        vis[v] =true;
        if(quiet[v] < quiet[res])
        {
            res = v;
        }

        for(auto u : adj[v])
        {
            if(!vis[u])
            dfs(adj, vis, u, res, quiet);
        }

        return;
    }
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n = quiet.size();
        vector<int> ans;
        vector<vector<int>> adj(n);
        vector<bool> vis(n, false);

        for(auto e : richer)
        {
            adj[e[1]].push_back(e[0]);
        }
        
        int res ;
        for(int i=0; i<n; i++)
        {
            res = i;
           dfs(adj, vis,i, res, quiet );
           ans.push_back(res);

           vis.assign(n, false);
        }

        return ans;
    }
};
