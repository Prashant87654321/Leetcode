class Solution {
public:
    int minimumDifference(vector<int>& nums) {
        int n = nums.size()/2;

        vector<vector<int>> left(n+1), right(n+1);

        for(int i=0; i<(1<<n); i++){
            int l = 0, r=0, sz=0;
            for(int j=0; j<n; j++){
                if(i & (1<<j)){
                    sz++;
                    l += nums[j];
                    r += nums[n+j];
                }
            }
            left[sz].push_back(l);
            right[sz].push_back(r);
        }
        for(int sz=0; sz<=n; sz++){
            sort(right[sz].begin(), right[sz].end());
        }
        int res = INT_MAX;
        int totSum = accumulate(nums.begin(), nums.end(), 0);
        res = min(abs(totSum - 2*left[n][0]), abs(totSum - 2*right[n][0]));

        for(int sz =1; sz<n; sz++){
            for(auto &val1 : left[sz]){
               int val2 = (totSum - 2*val1)/2;
               auto it = lower_bound(right[n-sz].begin(), right[n-sz].end(), val2);
               if(it != right[n-sz].end()){
                   res = min(res, abs(totSum - 2*(val1+(*it))));
               }
               if(it != right[n-sz].begin()){
                   it--;
                   res = min(res, abs(totSum - 2*(val1+(*it))));
               }
            }
        }
        return res;
    }
};
