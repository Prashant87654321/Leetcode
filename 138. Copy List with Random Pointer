class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
        return NULL;
        map<Node*, Node*> mp;
        Node* newHead = new Node(head->val);
        mp[head]= newHead;
        Node* tmp = newHead;
        while(head && (head->next || head->random) ){
            if(head->next){
           if(mp.find(head->next) != mp.end()){
               tmp->next = mp[head->next];
           }
           else{
               tmp->next = new Node(head->next->val);
               mp[head->next] = tmp->next;
           }
           }
           if(head->random){
           if(mp.find(head->random) != mp.end()){
               tmp->random = mp[head->random];
           }
           else{
               tmp->random = new Node(head->random->val);
               mp[head->random] = tmp->random;
           }
           }

           tmp= tmp->next;
           head= head->next;
        }
     return newHead;
    }
};
