class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int n = garbage.size();
        vector<int> preSum(n, 0);
        for(int i=0; i<n-1; i++){
            preSum[i+1] = travel[i] + preSum[i];
        }
        unordered_map<char, int> garbageTypeToAmount;
        enum garbageType {G, M, P};
        vector<int> lastHouse(3,0);
        int total = 0;
        int i=0; 
        for(auto& houseGarbage : garbage){
            total += houseGarbage.size();
            for(auto& c : houseGarbage){
                 if(c == 'G') lastHouse[G] = i;
                 if(c== 'M') lastHouse[M] = i;
                 if(c == 'P') lastHouse[P] = i;
            }
            i++;
        }
        total += preSum[lastHouse[G]] + preSum[lastHouse[M]] + preSum[lastHouse[P]];

        return total;
    }
};
