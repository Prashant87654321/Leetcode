class Solution {
public:
    int dp[31][31];
    const int INF = 1e6;
    vector<int> preSum;
    int solve(int i, int j, vector<int> &stones, int k){
        if(i>=j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        dp[i][j] = INF;
        for(int l=i; l<j; l += k-1){
            dp[i][j] = min(dp[i][j] , solve(i, l, stones, k) + solve(l+1, j, stones, k));
        }
        if((j-i)%(k-1) == 0){
            dp[i][j] += preSum[j+1] - preSum[i];
        }

        return dp[i][j];
    }
    int mergeStones(vector<int>& stones, int k) {
        int n = stones.size();
        if((n-1)%(k-1) != 0) return -1;

        preSum.resize(n+1, 0);
        for(int i=0; i<n; i++){
            preSum[i+1] = preSum[i] + stones[i];
        }
        memset(dp, -1, sizeof(dp));
        
        return solve(0, n-1, stones, k);
    }
};
