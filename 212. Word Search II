class Solution {
    struct TrieNode {
       TrieNode* child[26];
       bool isEnd;
       string word;
       TrieNode() {
           for(int i=0; i<26; i++){
               child[i] = nullptr;
           }
           isEnd = false;
           word = "";
       }
    };
    TrieNode* root = new TrieNode();
    void insert(string& s){
       TrieNode* curr = root;
       for(auto& c : s){
           int index = c - 'a';
           if(curr->child[index] == nullptr){
               curr->child[index] = new TrieNode;
           }
           curr = curr->child[index];
       }
       curr->isEnd = true;
       curr->word = s;
    }
public:
    void solve(int i, int j, vector<vector<char>>& board, int& n, int& m, TrieNode* curr, vector<string>& res){
        if(i < 0 || i >=n || j < 0 || j >= m) return;

        int index = board[i][j] - 'a';
        if(board[i][j] == '#' || curr->child[index] == nullptr) return;
        
        curr = curr->child[index];
        if(curr->isEnd){
            res.push_back(curr->word);
            curr->isEnd = false;
        }

        board[i][j] = '#';
        solve(i+1, j, board, n, m, curr, res);
        solve(i-1, j, board, n, m, curr, res);
        solve(i, j+1, board, n, m, curr, res);
        solve(i, j-1, board, n, m, curr, res);

        board[i][j] = char(index + 'a');
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        for(auto& word : words){
            insert(word);
        }
        int n = board.size(), m= board[0].size();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                solve(i, j, board, n, m, root, res);
            }
        }

        return res;
    }
};
