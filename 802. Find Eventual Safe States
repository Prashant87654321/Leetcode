class Solution {
public:
    
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n= graph.size();
        vector<int> ans;
        vector<vector<int>> reverseGraph(n);
        vector<int> indegree(n, 0);

        for(int i=0; i<n; i++)
        {
            for(auto v : graph[i])
            {
                reverseGraph[v].push_back(i);
            }
            indegree[i] = graph[i].size();
        }

        queue<int> q;
        for(int i=0; i<n; i++)
        {
            if(indegree[i] == 0)
            q.push(i);
        }
        
        int node ;
        while(!q.empty())
        {
            node = q.front();
            q.pop();

            for(auto u : reverseGraph[node])
            {
                indegree[u]--;
                if(indegree[u] == 0)
                q.push(u);
            }
           ans.push_back(node);
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};
