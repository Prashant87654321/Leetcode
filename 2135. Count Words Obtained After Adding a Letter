class Solution {
    struct TrieNode {
       TrieNode* child[26];
       bool end;
       TrieNode() {
           for(int i=0; i<26; i++){
               child[i]= nullptr;
           }
           end = false;
       } 
    };
    TrieNode* root = new TrieNode();
    void insert(string& s){
        TrieNode* cur = root;
        for(auto &c : s){
            int idx = c-'a';
            if(cur->child[idx] == nullptr)
            cur->child[idx] = new TrieNode();

            cur = cur->child[idx];
        }
        cur->end = true;
    }
    bool  search(string& s){
        TrieNode* cur = root;
        for(auto &c : s){
            int idx = c-'a';
            if(cur->child[idx] == nullptr)
             return false;

            cur = cur->child[idx];
        }
        return cur->end;
    }
public:
    int wordCount(vector<string>& startWords, vector<string>& targetWords) {
        
        for(auto word : startWords){
            sort(word.begin(), word.end());
            insert(word);
        }
        int count = 0;
        for(auto s : targetWords){
            sort(s.begin(), s.end());
            for(int i=0; i<s.size(); i++){
                string t;
                for(int j=0; j<s.size(); j++){
                   if(j==i) continue;
                   t.push_back(s[j]);
                }
                if(search(t)){
                    count++; 
                    break;
                }
            }
        }
        return count;
    }
};
