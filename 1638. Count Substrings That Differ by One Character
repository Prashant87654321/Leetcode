class Solution {
    struct TrieNode {
       TrieNode* child[26];
       int end;
       TrieNode() {
           for(int i=0; i<26; i++){
               child[i]= nullptr;
           }
           end = 0;
       } 
    };
    TrieNode* root = new TrieNode();
    void insert(string& s){
        TrieNode* cur = root;
        for(auto &c : s){
            int idx = c-'a';
            if(cur->child[idx] == nullptr)
            cur->child[idx] = new TrieNode();

            cur = cur->child[idx];
        }
        cur->end++;
    }
    int  search(string& s){
        TrieNode* cur = root;
        for(auto &c : s){
            int idx = c-'a';
            if(cur->child[idx] == nullptr)
             return 0;

            cur = cur->child[idx];
        }
        return cur->end;
    }
public:
    int countSubstrings(string s, string t) {
        int n = t.size();
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                string curr = t.substr(i, j-i+1);
                insert(curr);
            }
        }
        n = s.size();
        int count = 0;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
               string curr = s.substr(i, j-i+1);
               for(int k=0; k<curr.size(); k++){
                   char ch = curr[k];
                   for(int l=0; l<26; l++){
                       if(curr[k] - 'a' == l ) continue;
                       curr[k] = char(l + 'a');
                       count += search(curr);
                       curr[k] = ch;
                   }
                   curr[k] = ch;
               }
            }
        }
        return count;
    }
};
