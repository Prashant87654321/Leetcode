class Solution {
public:

   
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        
        vector<vector<pair<int, double>>> adj(n);
        int m = edges.size();
        for(int i=0; i<m; i++)
        {
            adj[edges[i][0]].push_back( { edges[i][1], log(succProb[i]) } );
            adj[edges[i][1]].push_back( { edges[i][0], log(succProb[i]) } );
        }
        vector<double> logProb(n,INT_MIN);
        vector<bool> vis(n, false);

        priority_queue< pair<double , int> , vector< pair<double , int> > > pq;

        pq.push({0.0, start});
        logProb[start] = 0.0;

        while(!pq.empty())
        {
            auto p = pq.top();
            pq.pop();

            int index = p.second;
            double minProb = p.first;

            vis[index] = true;

            if(index == end)
            return exp(logProb[end]);

            if(logProb[index] > minProb)
            continue;

            for(auto e : adj[index])
            {
               int child = e.first;
               double cost = e.second;

               if(vis[child])
               continue;
               
               if(cost + logProb[index] > logProb[child] )
               {
                   logProb[child] = logProb[index] + cost;
                   pq.push( { logProb[child] , child } );
               }
           
            }

        }

        return 0;
    }
};
