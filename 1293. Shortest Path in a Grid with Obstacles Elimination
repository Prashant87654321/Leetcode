class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        
        int n = grid.size();
        int m = grid[0].size();
        bool vis[n][m][k+1] ;
        memset(vis, false, sizeof(vis));
        int dx[4] = {0, -1, 0, 1}, dy[4] = {-1, 0, 1, 0};
        
        queue<vector<int>> q;
        q.push({0,0,0});
        vis[0][0][0] = true;
        int level  =0;

        while(!q.empty()){
            int sz = q.size();
            for(int i=0; i<sz; i++){
               vector<int> curr = q.front();
               q.pop();
               if(curr[0] == n-1 && curr[1] == m-1){
                   return level;
               }
               for(int j=0; j<4; j++){
                   int nr = curr[0] + dx[j];
                   int nc = curr[1] + dy[j];

                   if(nr>=0 && nr<n && nc>=0 && nc<m ){
                       if(!vis[nr][nc][curr[2]] && grid[nr][nc] == 0){
                           q.push({nr, nc, curr[2]});
                           vis[nr][nc][curr[2]]  = true;
                       }
                       if(curr[2]+1 <= k && !vis[nr][nc][curr[2] + 1] && grid[nr][nc] == 1){
                           q.push({nr, nc, curr[2] + 1});
                           vis[nr][nc][curr[2] + 1] = true;
                       }
                   }
               }
            }
            level++;
        }
       return -1;
    }
};
