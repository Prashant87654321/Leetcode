class Solution {
public:
    const int INF = 1e5;
    int dp[50][50][50];
    int solve(int r1, int c1, int c2, vector<vector<int>> &grid, int &n){
        int r2 = r1 + c1 - c2;

        if(r1 >= n || r2 >= n || c1 >= n || c2 >= n ) return -INF;

        if(grid[r1][c1] == -1 || grid[r2][c2] == -1) return -INF;
        
        if(r1 == n-1 && c1 == n-1) return grid[r1][c1];

        if(dp[r1][c1][c2] != -1) return dp[r1][c1][c2];
        int ans = grid[r1][c1] + ( (r1 != r2 || c1 != c2) ? grid[r2][c2] : 0);
         
        ans += max(solve(r1+1, c1, c2, grid,  n), 
               max(solve(r1+1, c1, c2+1, grid, n),
               max(solve(r1, c1+1, c2, grid, n),
                   solve(r1, c1+1, c2+1, grid, n))));
        dp[r1][c1][c2] = ans;

        return ans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        memset(dp, -1, sizeof(dp));
        return max(0, solve(0, 0, 0, grid, n));
    }
};
