class Solution {
public:
    
    int solve(vector<int>& piles, vector<vector<int>>& dp, int l, int r){
        if(l > r)
        return 0;
        if(dp[l][r] != 0)
        return dp[l][r];

        bool flag = ( (r-l) % 2 == 0);
        int left = (!flag ? piles[l] : 0);
        int right = (!flag ? piles[r] : 0);

        dp[l][r] = max(left + solve(piles, dp, l+1, r), solve(piles, dp, l, r-1) + right);
        return dp[l][r];
    }
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n, vector<int>(n,0));

        int score = solve(piles, dp, 0, n-1);
        return (score > accumulate(piles.begin(), piles.end(), 0)/2);

    }
};
