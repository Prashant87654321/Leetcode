class Solution {
    const int mod = 1e9 + 7;
    int dp[500][500][2];
    int solve(int idx, int evilMatchedIdx,bool boundary, string &s, string &evil, vector<int> &lps){
        if(evilMatchedIdx == evil.size()){
            return 0;
        }
        if(idx == s.size()){
            return 1;
        }

        if(dp[idx][evilMatchedIdx][boundary] != -1) return dp[idx][evilMatchedIdx][boundary];
        char start ='a';
        char end = boundary ? s[idx] : 'z';
        int res = 0;
        for(char ch = start; ch <= end; ch++){
            int j = evilMatchedIdx;
            while(j > 0 && evil[j] != ch){
                j = lps[j-1];
            }
            if(ch == evil[j]){
                j++;
            }
            res += solve(idx+1, j, boundary && (ch == end) , s, evil, lps);
            res %= mod;
        }
        return dp[idx][evilMatchedIdx][boundary] = res;
    }
public:
    int findGoodStrings(int n, string s1, string s2, string evil) {
        
        vector<int> lps(n);
        for(int i=1; i<evil.size(); i++){
            int j = lps[i-1];
            while(j > 0 && evil[j] != evil[i]){
                j = lps[j-1];
            }
            if(evil[j] == evil[i]){
                lps[i] = j + 1;
            }
        }
        memset(dp, -1, sizeof(dp));
        int res = solve(0, 0, 1, s2, evil, lps);
        memset(dp, -1, sizeof(dp));
        res -= solve(0, 0, 1, s1, evil, lps);
        if(s1.find(evil) == string::npos){
            res++;
        }
        if(res < 0){
            res += mod;
        }
        return res;
    }
};
