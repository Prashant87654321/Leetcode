class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        unordered_map<int , vector<int>> child;
        vector<int> parent(n, -1);
        for(int i=0; i<n; i++){
            if(leftChild[i] >= 0){
                child[i].push_back(leftChild[i]);
              if(parent[leftChild[i]] != -1) return false;

              parent[leftChild[i]]= i;
            }
            if(rightChild[i] >= 0){
                child[i].push_back(rightChild[i]);
            if(parent[rightChild[i]] != -1) return false;

              parent[rightChild[i]]= i;
            }      
        }
        int root = -1;
        for(int i=0; i<n; i++){
          if(parent[i] == -1){
             if(root != -1) return false;

             root = i;
          }
        }
        if(root == -1) return false;
        
        queue<int> q;
        q.push(root);
        vector<bool> vis(n, false);
        int count = 1;
        vis[root] = true;
        while(!q.empty()){
           int node = q.front();
           q.pop();
           for(auto c : child[node]){
               if(vis[c]) return false;
               q.push(c);
               vis[c]=  true;
               count++;
           }

        }
    
        return (count == n);
    }
};
