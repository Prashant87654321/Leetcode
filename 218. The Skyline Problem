class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        set<int, greater<int>> s;
        s.insert(0);
        vector<vector<int>> data;
        for(auto building : buildings){
            data.push_back({building[0], building[2], 1});
            data.push_back({building[1], building[2], -1});
        }
        sort(data.begin(), data.end());
        int i=0;
        int prev = 0;
        vector<vector<int>> res;
        unordered_map<int, int> cnt;
        while(i < data.size()){
            int curr = data[i][0];
            while(i<data.size() && data[i][0] == curr){
                if(data[i][2] == 1){
                    s.insert(data[i][1]);
                    cnt[data[i][1]]++;
                }
                else {
                  cnt[data[i][1]]--;
                  if(cnt[data[i][1]] == 0) s.erase(data[i][1]);
                }
                i++;
            }
            if(*(s.begin()) != prev){
                prev = *(s.begin());
                res.push_back({curr, prev});
            }
        }
       return res;
    }
};
