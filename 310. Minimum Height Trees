class Solution {
public:
    
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n==1)
        return {0};

        vector<int> res;
        vector<vector<int>> adj(n);
        vector<int> degree(n,0);
        queue<int> q;
         
        for(auto vec : edges)
        {
            adj[vec[0]].push_back(vec[1]);
            adj[vec[1]].push_back(vec[0]);
            degree[vec[0]]++;
            degree[vec[1]]++;
        }

        for(int i=0; i<n; i++)
        {
            if(degree[i]==1)
            q.push(i);
        }
        int count = n;
        while(count > 2)
        {
           int size_q = q.size();
           count = count - size_q;
            for(int i=0; i<size_q; i++)
             {
                int v= q.front();
                q.pop();
                
                degree[v]--;
                for(auto u : adj[v])
                {
                   degree[u]--;

                  if(degree[u]==1)
                  q.push(u);
                }
             }
        }

        while(!q.empty())
        {
            res.push_back(q.front());
            q.pop();
        }
      return res;
         
    }
};
