/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    unordered_map<string, int> mp;
    unordered_map<int, int> cnt;
    int idCount = 1;
public:
    int solve(TreeNode* root, vector<TreeNode*>& res){
        if(!root) return 0;

        string ls = to_string(solve(root->left, res));
        string rs = to_string(solve(root->right, res));
        string cur = ls + "_" + to_string(root->val) + "_" + rs;
        if(mp[cur] == 0){
            mp[cur] = idCount;
            idCount++;
        }
        int id = mp[cur];
        cnt[id]++;
        if(cnt[id] == 2){
            res.push_back(root);
        }
        return id;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*> res;
        solve(root, res);
        return res;
    }
};
