class Solution {
public:
    int dfs(int i, int j, int &m, int &n, vector<vector<int>> &grid, vector<vector<int>> &ans, vector<vector<bool>> &vis){
        if(vis[i][j] ) return ans[i][j];
        
        int m1=0, m2 =0, m3 =0;
        if(i-1 >=0 && j+1 < n && grid[i-1][j+1] > grid[i][j])
         m1 = 1 + dfs(i-1, j+1, m, n, grid, ans, vis);
        if(j+1 < n && grid[i][j+1] > grid[i][j])
         m2 = 1 + dfs(i, j+1, m,n, grid, ans, vis);
        if(i+1 < m && j+1 <n && grid[i+1][j+1] > grid[i][j])
         m3 = 1 + dfs(i+1, j+1, m, n, grid, ans, vis);
         
         vis[i][j] = true;
         ans[i][j] = max(m1, max(m2, m3));

         return ans[i][j];
    }
    int maxMoves(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        vector<vector<bool>> vis(m, vector<bool>(n, false) );
        int res=0;
         for(int i=0; i<m; i++){
           res = max(res, dfs(i, 0, m, n, grid, ans, vis) );
          } 

        return res;
    }
};
