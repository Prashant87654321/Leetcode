class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int n = beginWord.size();
        unordered_map<string, vector<string>> mp;
        for(auto &word : wordList){
            for(int i=0; i<n; i++){
                string t = word;
                t[i] = '#';
                mp[t].push_back(word);
            }
        }
        queue<string> q;
        q.push(beginWord);
        unordered_map<string, bool> vis;
        vis[beginWord] = true;
        int level = 1;
        while(!q.empty()){
            int sz = q.size();
            for(int i=0; i<sz; i++){
                string s = q.front();
                q.pop();
                if(s == endWord){
                    return level;
                }
                for(int i=0; i<n; i++){
                    string t = s;
                    t[i] = '#';
                  for(auto word : mp[t]){
                    if(!vis[word]){
                        q.push(word);
                        vis[word]=true;
                    }
                  }
                }
            }
            level++;
        }
        return 0;
    }
};
