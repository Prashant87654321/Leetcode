class Solution{
public:
    int solve(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>&dp, int &res, int &n, int &m){
        // if(i >= n || i <0 || j >= m || j < 0){
        //     return 0;
        // }
        if(dp[i][j] != -1) return dp[i][j];
        dp[i][j] = 1;

        if(i+1 < n && matrix[i+1][j] > matrix[i][j]) 
           dp[i][j] = max(dp[i][j], 1 + solve(i+1, j, matrix, dp, res, n, m));
        if(i-1 >= 0 && matrix[i-1][j] > matrix[i][j])
           dp[i][j] = max(dp[i][j], 1 + solve(i-1, j, matrix, dp, res, n, m));
        if(j+1 < m && matrix[i][j+1] > matrix[i][j]) 
           dp[i][j] = max(dp[i][j], 1 + solve(i, j+1, matrix, dp, res, n, m));
        if(j-1 >= 0 && matrix[i][j-1] > matrix[i][j])
           dp[i][j] = max(dp[i][j], 1 + solve(i, j-1, matrix, dp, res, n, m));

        res = max(res, dp[i][j]);

        return dp[i][j];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        int res = 0;
        vector<vector<int>> dp(n, vector<int>(m, -1));
        for(int i=0; i<n; i++){
           for(int j=0; j<m; j++){
              if(dp[i][j] == -1){
                 solve(i, j, matrix, dp, res, n, m);
              }
           }
        }
   
        return res;
    }
};
