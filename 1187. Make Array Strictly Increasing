class Solution {
public:
    map< pair<int, int>, int> mp;
    int ceil(vector<int> &v, int val){
        int l = 0, r = v.size()-1;
        int ans = -1;
        while(l <= r){
            int mid = l + (r-l)/2;
            if(v[mid]<= val) 
             l= mid + 1;
            else
            {
                ans = mid;
                r = mid-1;
            }
        }
        return ans;
    }
    int dfs(int i, int prev, vector<int> &arr1, vector<int> &arr2){
        if(i >= arr1.size())
        return 0;

        if(mp.find({i,prev}) != mp.end()) return mp[{i, prev}];

        int cost = 2001;

        if(arr1[i] > prev){
            cost = dfs(i+1, arr1[i], arr1, arr2);
        }
        int idx = ceil(arr2, prev);
        if(idx != -1){
            cost = min(cost, 1 + dfs(i+1, arr2[idx], arr1, arr2));
        }

        return mp[{i,prev}] = cost;
    }
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        
        sort(arr2.begin(), arr2.end());
        int ans = dfs(0, -1, arr1, arr2);

        return (ans < 2001 ? ans : -1);   
    }
};
