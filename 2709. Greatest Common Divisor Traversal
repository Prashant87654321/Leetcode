class Solution {
public:
    unordered_map<int, vector<int>> indexToPrime, primeToIndex;
    unordered_map<int, bool> vis, visPrime;

    void dfs(int v){
        if(vis[v]) return;

        vis[v]=1;
        for(auto &prime : indexToPrime[v]){
            if(visPrime[prime]) continue;

            visPrime[prime]=1;
            for(auto &index : primeToIndex[prime]){
                if(vis[index]) continue;

                dfs(index);
            }
        }
    }
    bool canTraverseAllPairs(vector<int>& nums) {
        int n = nums.size();

        for(int i=0; i<n; i++){
            int tmp = nums[i];
            for(int j=2; j*j <= tmp ; j++){
                if(tmp % j == 0){
                    indexToPrime[i].push_back(j);
                    primeToIndex[j].push_back(i);
                    while(tmp %j == 0)
                    tmp /= j;
                }
            }
            if(tmp > 1){
                indexToPrime[i].push_back(tmp);
                primeToIndex[tmp].push_back(i);
            }
        }

      dfs(0);
      for(int i=0; i<n; i++){
          if(!vis[i]) return 0;
      }
      return 1;
    }
};
