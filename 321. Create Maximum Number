class Solution {
    vector<int> findMax(vector<int> &nums, int k){
        vector<int> res;
        int n = nums.size();
        for(int i=0; i<n; i++){
            while(!res.empty() && res.size() + n-i > k  && res.back() < nums[i]) res.pop_back();
            if(res.size() < k) res.push_back(nums[i]);
        }
        return res;
    }

    void merge(int i, int j, vector<int>& v1, vector<int> &v2, vector<int> &res){
        if(i>=v1.size() && j >= v2.size()) return;
        if(i >= v1.size()){
            res.push_back(v2[j]);
            merge(i, j+1, v1, v2, res);
            return;
        }
        if(j >= v2.size()){
           res.push_back(v1[i]);
           merge(i+1, j, v1, v2, res);
           return;
        }
        if(v1[i] == v2[j]){
            int idx1 = i, idx2 = j;
           while(idx1 < v1.size() && idx2 < v2.size() && v1[idx1] == v2[idx2]){
               //res.push_back(v1[idx1]);
               idx1++;
               idx2++;
           }
           if( idx2 >= v2.size()){
               res.push_back(v1[i]);
               merge(i+1, j, v1, v2, res);
           }
           else if(idx1 >= v1.size()){
               res.push_back(v2[j]);
               merge(i, j+1, v1, v2, res);
           }
           else{
               if(v1[idx1] > v2[idx2]){
                   res.push_back(v1[i]);
                   merge(i+1, j, v1, v2, res);
               }
               else{
                   res.push_back(v2[j]);
                   merge(i, j+1, v1, v2, res);
               }
           }
        }
        else if(v1[i] > v2[j]){
            res.push_back(v1[i]);
            merge(i+1, j, v1, v2, res);
        }
        else{
            res.push_back(v2[j]);
            merge(i, j+1, v1, v2, res);
        }
    }
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> res(k,0);
        vector<int> ans1, ans2;
        for(int i=0; i<=k; i++){
           if( i > (int)nums1.size() || (k-i) > (int)nums2.size() ) continue;
           vector<int> v1 = findMax(nums1, i);
           vector<int> v2 = findMax(nums2, k-i);
           vector<int> currRes;
           merge(0, 0, v1, v2, currRes);
           if(currRes > res){
                res = currRes;
           }
        }
        return res;
    }

};
