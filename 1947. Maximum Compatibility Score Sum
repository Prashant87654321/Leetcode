class Solution {
    int dp[8][1<<8];
public:
    int solve(int i, int mask, int &m, vector<vector<int>> &scores){
        if(i==m) return 0;

        if(dp[i][mask] != -1) return dp[i][mask];

        dp[i][mask]=0;
        for(int j=0; j<m; j++){
            if( mask & (1<<j)){
                dp[i][mask] = max( dp[i][mask], scores[i][j] + solve(i+1, mask^(1<<j), m, scores));
            }
        }
       return dp[i][mask];
    }
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> scores(m, vector<int>(m));
        for(int i=0; i<m; i++){
            for(int j=0; j<m; j++){
                scores[i][j]=0;
              for(int k=0; k<n; k++){
                  scores[i][j] += students[i][k] == mentors[j][k];
              }
            }
        }
        memset(dp, -1, sizeof(dp));
        return solve(0, (1<<m)-1, m, scores);

    }
};
