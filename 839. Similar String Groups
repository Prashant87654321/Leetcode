class UnionFind{
     vector<int> parent, rank;
     int setCount;
     public:
     UnionFind(int n){
        for(int i=0; i<n; i++){
            parent.push_back(i);
        }
        setCount = n;
        rank.resize(n, 0);
     }

    int find(int x){
        int root = x;
        while(root != parent[root])
        root = parent[root];

        while(x != root){
            int t = parent[x];
            parent[x] = root;
            x = t;
        }
        return root;
    }

    void union_(int x, int y){
        int xSet = find(x);
        int ySet = find(y);

        if(xSet == ySet) return;

        setCount--;
        if(rank[ySet] < rank[xSet]) parent[ySet] = xSet;
        else{
            parent[xSet] = ySet;
            if(rank[xSet] == rank[ySet]) rank[ySet]++;
        }
    }

    int get_setCount(){
        return setCount;
    }
};
class Solution {
public:
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
        UnionFind obj(n);

        for(int i=0; i<n; i++){
            for(int j=0; j<i; j++){
                int count = 0;
               for(int k=0; k<strs[j].size(); k++){
                   if(strs[i][k] != strs[j][k]) count++;

                   if(count > 2) break;
               }
               if(count <= 2){
                   obj.union_(i, j);
               }
            }
        }
        return obj.get_setCount();
    }
};
