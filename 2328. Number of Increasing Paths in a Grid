class Solution {
public:
    int dp[1001][1001];
    const int md = 1e9 + 7;
    int solve(vector<vector<int>>& grid, int i, int j){
        // if(i <0 || i >= grid.size() || j < 0 || j >= grid[0].size())
        // return 0;

        if(dp[i][j] != -1) return dp[i][j];
        dp[i][j] = 0;
        if(i-1 >=0 && grid[i][j] < grid[i-1][j] ) dp[i][j] = (dp[i][j] + 1 + solve(grid, i-1, j)) % md;
        if(i+1 <grid.size() && grid[i][j] < grid[i+1][j] ) dp[i][j] = ( dp[i][j] + 1 + solve(grid, i+1, j)) % md;
        if(j-1 >=0 && grid[i][j] < grid[i][j-1] ) dp[i][j] = (dp[i][j] + 1 + solve(grid, i, j-1)) % md;
        if(j+1 <grid[0].size() && grid[i][j] < grid[i][j+1] ) dp[i][j] = (dp[i][j] + 1 + solve(grid, i, j+1)) % md;
        
        return dp[i][j];
    }
    int countPaths(vector<vector<int>>& grid) {
        memset(dp, -1, sizeof(dp));

        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                if(dp[i][j] == -1){
                    solve(grid, i, j);
                }
            }
        }
        long long res = 0;
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                res = (res + dp[i][j]) % md;
            }
        }
        res = (res + grid.size()*grid[0].size()) % md;

        return res;
    }
};
