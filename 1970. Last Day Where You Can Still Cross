class Solution {
    unordered_map<int, int> cellToDay;
    vector<vector<bool>> vis;
public:
     bool dfs(int i, int j, int& row, int& col, int& m){
         if(i < 0 || i>=row || j<0 || j >= col) return false;
         if(vis[i][j]) return false;
         vis[i][j] = true;
        
         if(cellToDay.find(100000*i + j) != cellToDay.end()){
             if(cellToDay[100000*i + j] <= m) return false;
         }
         if(i==row-1) return true;

         return dfs(i-1, j, row, col, m) ||
                    dfs(i, j-1, row, col, m) ||
                    dfs(i+1, j, row, col, m) ||
                    dfs(i, j+1, row, col, m) ;
         
     }
     bool check(int& row, int& col, int& m){

         for(int i=0; i<col; i++){
             if(!vis[0][i])
             if(dfs(0,i, row, col, m))return true;
         }

         return false;
     }
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {

        int n = cells.size();
        vis.resize(row, vector<bool>(col, false));
    
        for(int i=0; i<n; i++){
            int id = 100000*(cells[i][0]-1) + (cells[i][1]-1);
            cellToDay[id] = i;
        }
        int l = 0, r = n-1, ans = 0;
        while(l <= r){
            int m = l + (r-l)/2;

            if(check(row, col, m)){
                ans = m;
                l = m+1;
            }
            else {
              r = m-1;
            }
           vis.assign(row, vector<bool>(col, false));
        }
        return ans+1;
    }
};
