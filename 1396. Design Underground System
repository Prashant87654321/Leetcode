class Trie{
   Trie* child[27];
   int sum;
   int cnt;
   public:
   Trie(){
       for(int i=0; i<27; i++){
           child[i] = nullptr;
       }
       sum = 0;
       cnt = 0;
   }

   void insert(string& s, int journeyTime){
      Trie* t = this;
      for(auto& c : s){
          int idx;
          if(c == '_')
          idx = 26;
          else if(c >= 'a')
           idx = c- 'a';
          else if(c >= 'A') idx = c - 'A';
          else idx = c - '0';
          
          if(t->child[idx] == nullptr)
          t->child[idx] = new Trie;

          t = t->child[idx];
      }
      t->sum += journeyTime;
      t->cnt++;
   }

   double getAverageTime(string s){
       Trie* t = this;
      for(auto& c : s){
          int idx ;
          if(c == '_') idx = 26;
          else if(c >= 'a')
          idx = c- 'a';
          else if(c >= 'A') idx = c - 'A';
          else idx = c -'0';
          t = t->child[idx];
      }
      return 1.0 * t->sum / t->cnt;
   }
};
class UndergroundSystem {
    unordered_map<int, pair<string, int>> idToStart;
    Trie* root;
public:
    
    UndergroundSystem() {
        root = new Trie();
    }
    
    void checkIn(int id, string stationName, int t) {
        idToStart[id] = {stationName, t};
    }
    
    void checkOut(int id, string stationName, int t) {
        auto p = idToStart[id];
        string inOut = p.first +"_"+ stationName;
        root->insert(inOut, t - p.second);
    }
    
    double getAverageTime(string startStation, string endStation) {
        return root->getAverageTime(startStation+"_"+endStation);
    }
};

/**
 * Your UndergroundSystem object will be instantiated and called as such:
 * UndergroundSystem* obj = new UndergroundSystem();
 * obj->checkIn(id,stationName,t);
 * obj->checkOut(id,stationName,t);
 * double param_3 = obj->getAverageTime(startStation,endStation);
 */
