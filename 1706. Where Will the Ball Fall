class Solution {
public:
    int dfs(vector<vector<int>>& grid, int row, int col,int& m,int& n)
    {

        if(row == m)
        return col;

        if(grid[row][col]==1)
        {
            
            if(col != n-1 && grid[row][col+1] == grid[row][col])
            {
               return dfs(grid, row+1, col +1, m,n);
            }
            else
            return -1;
        }
        else
        {
            if(col != 0 && grid[row][col]==grid[row][col-1])
            {
                return dfs(grid, row+1, col-1,m,n);
            }
            else
            return -1;
        }

    }
    vector<int> findBall(vector<vector<int>>& grid) {
        int m=grid.size();
        int n= grid[0].size();

        vector<int> res(n,0);

        for(int i=0; i<n; i++)
        res[i] = dfs(grid, 0,i,m,n);

        return res;
    }
};
