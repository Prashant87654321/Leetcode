class Solution {
    bool f = false;
    unordered_map<string, int> vis;
    void dfs(string curr, unordered_map<string, set<string>> &adj, vector<string> &res, int &n){
        if(res.size() == n+1){
            f = true;
            return;
        }
        for(auto to : adj[curr]){
            string t = curr + "_" + to;
            if(vis[t] == 0) continue;
            vis[t]--;
            res.push_back(to);
            dfs(to, adj, res, n);
            if(f) break;
            res.pop_back();
            vis[t]++;
        }
    }
public:
    vector<string> findItinerary(vector<vector<string>>& tickets) {
        unordered_map<string, set<string>> adj;
        int n = tickets.size();
        for(auto &ticket : tickets){
            adj[ticket[0]].insert(ticket[1]);
            string t = ticket[0] + "_" + ticket[1];
            vis[t]++;
        }
        vector<string> res;
        res.push_back("JFK");
        dfs("JFK", adj, res, n);
        return res;
    }
};
