class Solution {
public:
   void dfs(vector<vector<int>>& graph, vector<vector<int>>& res,vector<int> temp, int node, int n)
   {
        if(node == n-1)
        {
            temp.push_back(n-1);
            res.push_back(temp);
            return;
        }
        temp.push_back(node);
        for(auto x:graph[node])
        {
        dfs(graph, res, temp, x, n);
        }
   }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> res;
         int n= graph.size();
         vector<int> temp;
         temp.push_back(0);
        for(auto node:graph[0])
        {
            dfs(graph, res,temp, node, n);
        }

        return res;
    }
};
