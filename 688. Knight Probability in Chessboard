class Solution {
    double dp[26][26][101];
public:
    double solve(int i, int j,int moves, int& n){
       if(i <0 || j<0 || i>=n || j >= n){
           if(moves < 0) return 1.0;
           return 0;
       }
       if(moves == 0) return 1.0;
       if(dp[i][j][moves] != -1.0) return dp[i][j][moves];
       
       dp[i][j][moves] = 0.125*(solve(i-2, j-1, moves-1, n) +
                                solve(i-2, j+1, moves-1, n) +
                                solve(i+2, j-1, moves-1, n) +
                                solve(i+2, j+1, moves-1, n) +
                                solve(i-1, j-2, moves-1, n) +
                                solve(i+1, j-2, moves-1, n) +
                                solve(i-1, j+2, moves-1, n) +
                                solve(i+1, j+2, moves-1, n));

        return dp[i][j][moves];
    }
    double knightProbability(int n, int k, int row, int column) {
        for(int i=0; i<=25; i++){
            for(int j=0; j<=25; j++){
                for(int k=0; k<=100; k++){
                    dp[i][j][k] = -1.0;
                }
            }
        }
        return solve(row, column, k, n);
    }
};
