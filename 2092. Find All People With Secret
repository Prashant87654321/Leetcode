class UnionFind {
   unordered_map<int, int> parent;
   public:
   UnionFind(){
       
   }

   int find(int x){
       if(parent.find(x) == parent.end()){
           parent[x] = x;
           return x;
       }
       int root = x;
       while(parent[root] != root)
       root = parent[root];

       while(x != root){
         int temp = parent[x];
         parent[x] = root;
         x = temp;
       }

       return x;
   }

   void union_(int x, int y){
       int xSet = find(x);
       int ySet = find(y);

       if(xSet == ySet) return;

       if(xSet < ySet) parent[ySet] = xSet;
       else{
           parent[xSet] = ySet;
       }
   }
};
class Solution {
public:
   struct{
    bool operator()(vector<int>& a , vector<int>& b){
        return a[2] < b[2];
    }
   }comp;
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        
        int m = meetings.size();

        vector<bool> hasSecret(n, false);
        hasSecret[0] =  true;
        hasSecret[firstPerson] = true;

        vector<int> res;
        res.push_back(0);
        res.push_back(firstPerson);

        sort(meetings.begin(), meetings.end(), comp);
        
        int i=0;
        // UnionFind obj1;
        // obj1.union_(0, firstPerson);
        while(i < m){
            UnionFind obj2;
            int currTime = meetings[i][2];
            unordered_set<int> currNodes;
            while(i < m && meetings[i][2] == currTime){
              obj2.union_(meetings[i][0], meetings[i][1]);
            //   if(hasSecret[meetings[i][0]] || hasSecret[meetings[i][1]])
            //    obj1.union_(0, meetings[i][0]);
              if(hasSecret[meetings[i][0]] || hasSecret[meetings[i][1]])
              obj2.union_(0, meetings[i][0]);
              currNodes.insert(meetings[i][0]);
              currNodes.insert(meetings[i][1]);
              i++;
            }

            // vector<int> temp(res.begin(), res.end());
            // for(auto person : temp){
                for(auto node : currNodes){
                    if(hasSecret[node]) continue;
                    int root = obj2.find(node);
                    if(root == 0){
                      res.push_back(node);
                      hasSecret[node] = true;
                    }
                }
            //}

        }
       return res;
    }
};
