class Solution {
public:
   tuple<int, string, int> getData(string& s){
        int i=0;
        int id = 0;
        while(s[i] != ':'){
           id = id*10 + (s[i]-'0');
           i++;
        }
        i++;
        string type="";
        while(s[i] != ':'){ 
            type += s[i];
            i++;
        }
        i++;
        int timestamp = 0;
        while(i < s.size()){
            timestamp = timestamp*10 + (s[i] - '0');
            i++;
        }

        return {id, type, timestamp};
    }
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        vector<int> res(n, 0);
        stack<int> st;
        int prev_time = 0;
        
        for(auto& log : logs){
            
            auto [id, type, timestamp] = getData(log);
            if(type == "start"){
                if(!st.empty())
                 res[st.top()] += timestamp - prev_time;

                st.push(id);
                prev_time = timestamp;
            }
            else{
                res[st.top()] += timestamp - prev_time + 1;
                st.pop();
                prev_time = timestamp + 1;
            }
        }
        return res;
    }
};
