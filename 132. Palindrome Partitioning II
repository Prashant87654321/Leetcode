class Solution {
public:
    const int INF = 1e5;
    vector<vector<bool>> isPalindrome;
    int solve(string &s, int i, int j, vector<vector<int>> &dp){
        if(i >= j) return 0;
        if(isPalindrome[i][j]) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        dp[i][j] = INF;
        for(int k=i; k<j; k++){
            if(isPalindrome[i][k])
            dp[i][j] = min(dp[i][j], 1 + solve(s, k+1, j, dp));
        }

        return dp[i][j];
    }
    int minCut(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        isPalindrome.resize(n, vector<bool>(n, false));
        for(int i=0; i<n; i++){
            isPalindrome[i][i] = true;
            if(i+1 < n && s[i] == s[i+1]) isPalindrome[i][i+1] = true;
        }

        int k = 2;
        while(k<n){
            int i=0, j = k;
            while(j < n){
                isPalindrome[i][j] = (isPalindrome[i+1][j-1] && (s[i] == s[j]));
                i++; j++;
            }
            k++;
        }
        return solve(s, 0, n-1, dp);
    }
};
