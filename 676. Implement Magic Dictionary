class MagicDictionary {
    struct TrieNode{
        TrieNode* child[26];
        bool isEnd;
        TrieNode(){
            for(int i=0; i<26; i++){
                child[i] = nullptr;
            }
            isEnd = false;
        }
    };
    TrieNode* root;
public:
   
    MagicDictionary() {
        root = new TrieNode();
    }
     void insert(string& s){
       TrieNode* cur = root;
       for(auto &c : s){
           int idx = c - 'a';
           if(cur->child[idx] == nullptr)
            cur->child[idx] = new TrieNode();

            cur = cur->child[idx];
       }
       cur->isEnd  =true;
    }
    bool searchDict(string& s){
        TrieNode* cur = root;
        for(auto &c : s){
            int idx = c - 'a';
            if(cur->child[idx] == nullptr) return false;
            cur = cur ->child[idx];
        }
        return cur->isEnd;
    }
    void buildDict(vector<string> dictionary) {
        for(auto& word : dictionary)
          insert(word);
    }
    
    bool search(string searchWord) {
        for(int i=0; i<searchWord.size(); i++){
            char t = searchWord[i];
           for(int j=0; j<26; j++){
               if(t == char('a' + j)) continue;
               searchWord[i] = char('a' + j);
               if(searchDict(searchWord)) return true;
           }
           searchWord[i] = t;
        }

        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */
