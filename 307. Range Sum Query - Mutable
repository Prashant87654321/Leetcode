class NumArray {
public:
    vector<int> arr;
    vector<int> segTree;
    int buildSegTree(int ss, int se, int si){
        if(ss == se){
            return segTree[si]= arr[ss];
        }
        int mid = (ss+se)/2;
        segTree[si] = buildSegTree(ss, mid, 2*si+1) + buildSegTree(mid+1, se,2*si+2);

        return segTree[si];
    }
    NumArray(vector<int>& nums) {
         arr = nums;
         segTree.resize(4*nums.size());
         buildSegTree(0, nums.size()-1, 0);
    }
    void update_val(int ss, int se, int si, int index, int diff){
          if(index < ss || se < index) return;
          segTree[si] += diff;

          if(se > ss){
              int mid = (ss+se)/2;
              update_val(ss, mid, 2*si+1, index, diff);
              update_val(mid+1, se, 2*si+2, index, diff);
          }
    }
    void update(int index, int val) {
        int diff = val - arr[index];
        arr[index]= val;
        update_val(0,arr.size()-1, 0, index, diff);
    }
    
    int rangeSum(int ss, int se, int si, int qs, int qe){
        if(qe < ss || se < qs) return 0;
        if(qs <= ss && se <= qe)return segTree[si];

        int mid = (ss+se)/2;
     return (rangeSum(ss,mid,2*si+1,qs,qe) + rangeSum(mid+1,se,2*si+2,qs,qe));
    }
    int sumRange(int left, int right) {
        return rangeSum(0, arr.size()-1, 0, left, right);
    }
};
