class Solution {
    int dp[51][51][51];
    int md = 1000000007;
public:
    int solve(int i, int j, int moves, int& m, int& n){
        if(i < 0 || i >= m || j < 0 || j >= n){
            if(moves >= 0) return 1;
            return 0;
        }
        if(moves == 0) return 0;
        if(dp[i][j][moves] != -1) return dp[i][j][moves];
        dp[i][j][moves] = 0;

        dp[i][j][moves] = (((solve(i-1, j, moves-1, m, n) +
                          solve(i+1, j, moves-1, m, n) ) % md +
                          solve(i, j-1, moves-1, m, n) ) % md +
                          solve(i, j+1, moves-1, m, n) ) % md;

        return dp[i][j][moves];
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        memset(dp, -1, sizeof(dp));
        return solve(startRow, startColumn, maxMove, m, n);
    }
};
