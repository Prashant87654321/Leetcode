class Solution {
    bool check(int &n, int &alloys, vector<int> &composition, vector<int> &cost, vector<int> &stock, int &budget){
          
          long long budget_t = (long long)budget;
          for(int i=0; i<n; i++){
             long long req = max(1LL*0, 1LL*alloys*composition[i] - 1LL*stock[i]);
                budget_t -= 1LL*req*cost[i];

                if(budget_t < 0) return false;
          }

          return true;
    }
    int solve(int &n, vector<int> &composition, vector<int> &stock, vector<int> &cost, int &budget){

        int l =0, r = 1e9;
        int ans = 0;
        while(l <= r){
          int m = l + (r-l)/2;
          if(check(n, m, composition, cost, stock, budget)){
              ans = m;
              l = m+1;
          }
          else{
              r = m-1;
          }
        }

        return ans;
    }
public:
    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {
        int mx = 0;
        for(int i=0; i<k; i++){
            mx = max(mx, solve(n, composition[i], stock, cost, budget));
        }
        return mx;
    }
};
