class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> adj(n+1);
        vector<bool> vis(n+1, 0);
        for(auto &time : times){
            adj[time[0]].push_back({time[1], time[2]});
        }
        
        priority_queue< pair<int,int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        vector<int> time(n+1,INT_MAX);
        time[k] = 0;
        pq.push({0, k});

        while(!pq.empty()){
            pair<int, int> p = pq.top();
            int cost = p.first, node = p.second;
            pq.pop();
            vis[node] = true;
            if(time[node] < cost) continue;

            for(auto edge : adj[node]){
                int idx = edge.first, wt = edge.second;
                if(vis[idx]) continue;

                int newTime = time[node] + wt;
                if(newTime < time[idx]){
                    time[idx] = newTime;
                    pq.push({newTime, idx});
                }
            }
        }
        int res = 0;
        for(int i=1; i<=n; i++){
           res = max(res, time[i]);
        }

        return ( (res == INT_MAX) ? -1 : res );
    }
};
