class Solution {
public:
    void solve(vector<vector<char>>& board) {
        
        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> vis(m, vector<bool>(n, false));
        queue<pair<int,int>> q;
        for ( int i=0; i<m; i++)
        {
            if(board[i][0]== 'O' && !vis[i][0])
            {
             q.push({i,0});
             vis[i][0]=true;
            }
            if(board[i][n-1] == 'O' && !vis[i][n-1])
            {
             q.push({i, n-1});
             vis[i][n-1]=true;
            }
        }

        for ( int j=0; j<n; j++)
        {
            if(board[0][j]== 'O' && !vis[0][j])
            {
              q.push({0,j});
              vis[0][j]=true;
            }
            if(board[m-1][j] == 'O' && !vis[m-1][j])
            {
              q.push({m-1, j});
              vis[m-1][j]=true;
            }
        }

        int dir[4][2] = {{0,-1},{-1,0},{0,1},{1,0}};

        while(!q.empty())
        {
             auto p = q.front();
             q.pop();
            
             int row = p.first;
             int col = p.second;


             for(int j=0;  j<4; j++)
             {
                 int nbh_row = row + dir[j][0];
                 int nbh_col = col + dir[j][1];

                 if(nbh_row >=0 && nbh_row < m && nbh_col >=0 && nbh_col <n)
                 {
                     if(board[nbh_row][nbh_col] == 'O' && !vis[nbh_row][nbh_col])
                     { 
                         q.push({nbh_row, nbh_col});
                         vis[nbh_row][nbh_col]=true;
                     }
                 }
             }
          
        }

        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j] == 'O' && !vis[i][j])
                board[i][j] = 'X';
            }
        }
    }
};
