class Solution {
public:
    int solve(vector<vector<int>>& adj, string& s, int v, int& res){
       priority_queue<int, vector<int>, greater<int>> pq;
       pq.push(0);
       pq.push(0);
       for(auto& u : adj[v]){

           int curr = solve(adj, s, u, res);

           if(s[v] == s[u]) continue;

           pq.push(curr);
           if(pq.size() > 2) pq.pop();
       }
        int mx2 = pq.top(); pq.pop();
        int mx1 = pq.top(); pq.pop();
        res = max(res, 1 + mx1 + mx2);

        return (1 + mx1);
    }
    int longestPath(vector<int>& parent, string s) {
        int n = parent.size();
        vector<vector<int>> adj(n);
        int res = 1;
        
        for(int i=1; i<n; i++){
           adj[parent[i]].push_back(i);
        }
        solve(adj, s, 0, res);

        return res;
    }
};
