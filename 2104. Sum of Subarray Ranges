class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        int n = nums.size();
        long long resMin = 0, resMax =0;
        stack<int> inc, dec;
        inc.push(-1);
        dec.push(-1);
        int currIndex=0, prevIndex=0, nextIndex=0;
        for(int i=0; i<=n; i++){
           while(inc.size() > 1 && (i == n || nums[inc.top()] >= nums[i]) ){
               currIndex = inc.top();
               inc.pop();
               prevIndex = inc.top();
               nextIndex = i;
               resMin += 1LL*nums[currIndex]*(currIndex - prevIndex)*(nextIndex - currIndex);
           }
           while(dec.size() > 1 && (i == n || nums[dec.top()] <= nums[i]) ){
               currIndex = dec.top();
               dec.pop();
               prevIndex = dec.top();
               nextIndex = i;
               resMax += 1LL*nums[currIndex]*(currIndex - prevIndex)*(nextIndex - currIndex);
           }
           inc.push(i);  
           dec.push(i); 
        }
        return (resMax - resMin);
    }
};
