class Solution {
public:
    vector<vector<int>> dp;
    bool solve(string &s, string &p, int n, int m){
        
        if(dp[n][m] != -1) return dp[n][m];
        if(n == 0 || m == 0) {
            if(n == 0 && m == 0) return true;
            if(m == 0) return false;
            if(n == 0) {
                if(p[m-1] != '*') return false;
                else return dp[n][m] = solve(s, p, n, m-1);
            }
        }
        if(p[m-1] == '?') return dp[n][m] = solve(s, p, n-1, m-1);
        if(p[m-1] == '*') return dp[n][m] = (solve(s,p, n-1, m) || solve(s, p, n, m-1));

        return dp[n][m] = ((s[n-1] == p[m-1]) && solve(s, p, n-1, m-1));
    }
    bool isMatch(string s, string p) {
        int n = s.size();
        int m = p.size();
        dp.resize(n+1, vector<int>(m+1, -1));

        return solve(s, p, n, m);
    }
};
